Questions done: 1,2,3,4,5,6,9,10,12,13.

Question 1:

BFS: A → B → C → D → E
DFS: A → B → D → C → E

Question 2:

Not a DAG due to the cycle A → B → C → A.

Question 3:

Possible Order: [A, B, C, D] or [A, C, B, D].

Question 4:

class Node:
    def __init__(self, weight, neighbors=None):
        self.w = weight
        self.neighbors = neighbors if neighbors else []

def has_path_sum(start_node, target_sum):
    visited = set()
    stack = [(start_node, start_node.w)]
    while stack:
        node, current_sum = stack.pop()
        if current_sum == target_sum:
            return True
        visited.add(node)
        for neighbor in node.neighbors:
            if neighbor not in visited:
                stack.append((neighbor, current_sum + neighbor.w))
        visited.remove(node)
    return False

    Question 5:

    from collections import deque

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def bfs_traversal(root):
    if not root:
        return []
    result, queue = [], deque([root])
    while queue:
        node = queue.popleft()
        result.append(node.val)
        if node.left: queue.append(node.left)
        if node.right: queue.append(node.right)
    return result

    Question 6:

    class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def merge_trees(t1, t2):
    if not t1: return t2
    if not t2: return t1
    merged = TreeNode(t1.val + t2.val)
    merged.left = merge_trees(t1.left, t2.left)
    merged.right = merge_trees(t1.right, t2.right)
    return merged

    Question 9:

    def floodFill(image, sr, sc, newColor):
    if image[sr][sc] == newColor: return image
    old, m, n = image[sr][sc], len(image), len(image[0])
    queue, image[sr][sc] = [(sr, sc)], newColor
    for r, c in queue:
        for dr, dc in [(-1,0), (1,0), (0,-1), (0,1)]:
            nr, nc = r+dr, c+dc
            if 0 <= nr < m and 0 <= nc < n and image[nr][nc] == old:
                image[nr][nc] = newColor
                queue.append((nr, nc))
    return image

    Question 12:

    def islandPerimeter(grid):
    perimeter = 0
    rows, cols = len(grid), len(grid[0])
    for r in range(rows):
        for c in range(cols):
            if grid[r][c] == 1:
                perimeter += sum(1 for dr, dc in [(-1,0), (1,0), (0,-1), (0,1)]
                                if not (0 <= r+dr < rows and 0 <= c+dc < cols) or grid[r+dr][c+dc] == 0)
    return perimeter

    Question 13:

    from collections import deque

def can_complete(N, prerequisites):
    adj = [[] for _ in range(N)]
    indegree = [0] * N
    for course, deps in enumerate(prerequisites):
        for dep in deps:
            adj[dep].append(course)
            indegree[course] += 1
    queue = deque([i for i, d in enumerate(indegree) if d == 0])
    order = []
    while queue:
        node = queue.popleft()
        order.append(node)
        for neighbor in adj[node]:
            indegree[neighbor] -= 1
            if indegree[neighbor] == 0:
                queue.append(neighbor)
    return (True, order) if len(order) == N else (False, [])

    Question 10: 
    Pseudo-code:
    function has_path(graph, s, d):
    if s == d: return True
    queue = [s]
    visited = {s}
    while queue not empty:
        node = queue.pop()
        for neighbor in graph[node]:
            if neighbor == d: return True
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append(neighbor)
    return False
